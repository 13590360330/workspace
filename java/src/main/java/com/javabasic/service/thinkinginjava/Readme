1.设计模式
   1,命令设计模式(P602):package com.java.com.service.Thinking_In_Java.Enum.EnumMaps
         [一个key,对应一条命令(指令)]
         com.java.com.service.Thinking_In_Java.innerclass.GreenhouseController
   2,职责链设计模式(P606):package com.java.com.service.Thinking_In_Java.Enum.PostOffice
         [程序员以多种不同的方式来解决一个问题,然后将它们链接在一起,当一个请求到来时,它遍历这个链,直到链中的某个方案能够处理该请求]
   3,单例模式(P122):com.java.com.service.Thinking_In_Java.basic.Lunch
   4,策略设计模式(P175):[创建一个能够根据所传递的参数对象的不同而具有不同行为的方法(接口的常见用法(P182))]
                       com.java.com.service.Thinking_In_Java.intereface.Apply
   5,"工厂方法"设计模式(P187):com.java.com.service.Thinking_In_Java.intereface.Factories
   6,"迭代器"设计模式(P191):com.java.com.service.Thinking_In_Java.innerclass.Sequence
   7,"模板方法"设计模式(P207):com.java.com.service.Thinking_In_Java.innerclass.GreenhouseControls
   8,"适配器"设计模式(P243):com.java.com.service.Thinking_In_Java.collection.ReversibleArrayList

2.如果对基本数据类型执行算术运算或按位运算,只要类型比int小(char,byte,short),这些值会自动转换成int,通常,表达式中出现的最大的数据类型决定了表达式最终结果的数据类型,eg,float*double->double
  (java编程思想P56)

3,java的所有数据类型在所有机器,所有平台上所占空间大小都是相同的(java编程思想P56)

4,void方法,隐式的含有一个return,手动加一个会报错(java编程思想P69)

5,无穷循环for(;;)和while(true)   (java编程思想P70)

6,break只能中断最内层循环,continue也是如此   (java编程思想P72)

7,对于非静态对象,调用构造函数初始化对象,然后实例化  (java编程思想P77,P94),初始化顺序(P94),任何字段的初始化在所有方法调用之前发生,静态数据的初始化(P95),非静态数据的初始化(P97)

8,包访问权限  (java编程思想P116),类访问权限 (java编程思想P121),  public(P121)

9,封装 (java编程思想P120)

10.要了解Java类是如何默认继承Object的？的原因其实并不需要知道JVM的实现细节。只需了解一下对于这种虚拟机程序的基本原理即可。一般对于这种靠虚拟机运行的语言（如Java、C#等）
   会有两种方法处理默认继承问题。
   1.编译器处理, CMD命令行下执行：javap MyClass>MyClass.txt(使用JDK自带的工具（javap）反编译)
   2.JVM处理
   总结
   JDK 6之前是编译器处理，JDK 7之后是虚拟机处理。
   但是仔细想想我们在编辑器里（IDE）打点时就能列出Object类下的方法，此时还没轮到编译器和jvm，编辑器就已经知道MyClass类的父类是Object类了，这是因为编辑器为我们做了一些智能处理。
   【end】
   注意区分编辑器和编译器   (java编程思想P127)

11,在一个类中，可以调用另一个类的main()方法,和调用static方法一样  (P128)

12,多路分发:com.java.com.service.Thinking_In_Java.Enum.RoShamBo1   P615,应用于,多种选择或状态对应多种结果的场景上

13,数组初始化,数组元素中的基本数据类型值和对象引用会自动初始化成默认值,将内存设置为二进制0值(对于数字和字符,就是0;对于布尔型,是false,
   对象引用被设为null P147)

14,构造器,初始化和清理 (P107),没有正确的构造器调用,编译器就不允许创建对象

15,每个.java文件(编译单元),最多只能有一个public类,class关键字的访问权限只有public和包访问权限,一个.java文件中的非public类,
应该是用来为public类提供支持的 (P107)

16,ClassPath及java解释器 (P112)

17,是否使用extends是因为需要向上转型,如果不涉及向上转型,应当更多的考虑组合,(含义:继承-对象是一个...,组合-对象有一个...),继承其实并不常用

18,构造器内部的多态方法的行为:父类构造器调用的方法,其实是被子类overwrite的方法(P163),编写构造器时有一条有效的准则:(P164)

19,关于接口和基类的选择(P179),当创建一个基类,他没有成员变量和任何方法定义,就应该选择接口

20,接口中的域,都是public static final的,所以接口的另一种用法是用来创建常量组  (P184)

21,(1).内部类的作用,向上转型为基类或者接口,得到基类或接口的引用,可以很方便的隐藏实现细节(P194),私有化内部类
   (2).外部类可以利用内部类实现多继承或多实现   P204

22,Arrays.asList():
   返回一个固定尺寸的List,可以修改数据,但是在这个方法获得的List对象上做出的任何会改变尺寸的操作,都会得到UnsupportedOperationException   (P474)
   其底层表示的是数组,因此不能调整尺寸,其生成的ArrayList是Arrays类里的私有静态内部类,而不是collection框架中的ArrayList
   但这个ArrayList也继承自Collection中的AbstractList,但在AbstractList中add()会抛出throw new UnsupportedOperationException(),也无delete()方法

23,Queue队列在并发编程中特别重要,常用作一种可靠的将对象从程序的某个区域传输到另一个区域的途经

24,操作系统环境变量  System.geten().entrySet()  P242

25,各种Collection和各种Map都可以在你向其中添加更多元素时,自动调整其尺寸.容器不能持有基本类型
   (推荐使用:ArrayList,LinkedList,HashSet,LinkedHashSet,HashMap,LinkedHashMap)
   总结,关于容器的选择( P245):
   (1).List也建立数字索引与对象的关联,因此,数组和List都是排好序的容器,List能够自动扩充容量
   (2).ArrayList便于查询,LinkedList便于插入和删除,如果要进行大量的随机访问,就使用ArrayList;如果要经常从表中间插入或删除元素,则应该使用LinkedList(P499)
   (3).Set不接受重复元素,HashSet提供最快的查询速度,而TreeSet保持元素处于排序状态,LinkedHashSet以插入顺序保存元素,且具有HashSet的查询速度(P477)
   (4).各种Queue以及栈的行为,由LinkedList提供支持
   (5).Map是一种将对象(而非数字)与对象相关联的设计,HashMap设计用来快速访问;而TreeMap保持"键"始终处于排序状态,所以没有HashMap快
          ,LinkedHashMap保持元素插入的顺序,但是也通过散列提供了快速访问能力,ConcurrentHashMap和ConcurrentMap用于多线程机制
   (6).新程序中不应该使用过时的Vector,HashTable和Stack

26,java.util.logging.Logger的使用 P253

27,栈轨迹: printStackTrace()方法所提供的信息可以通过getStackTrace()方法来直接访问

28,异常链,捕获一个异常后抛出另一个异常  P260

29,Error用来表示编译时和系统错误,Exception是可以被抛出的基本类型

30,任何从RuntimeException继承的异常,它们也被称为"不受检查异常",这种异常属于错误,RuntimeException代表的是编程错误,将被自动捕获

31,String,StringBuilder 及 StringBuffer
   StringBuilder的方法不是线程安全的（不能同步访问）。由于 StringBuilder相较于StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。
   用于String的"+"与"+="是java中仅有的两个重载过的操作符,而java并不允许程序员重载任何操作符(通过javap -c xxx.class我们可以查看,jvm加载class文件后生成的字节码,即执行步骤)
   String s= "abc" + mango + "def" + 47 在这个例子中,编译器创建了一个StringBuilder对象,用以构造最终的String,并为每个字符串调用一次StringBuilder的append()方法,总计四次
   ,最后调用toString()生成结果,并存为s也就是说,例如 for(;;) result=fields[i] 这种程序,会每循环一次创建一个新的stringBuilder(),以及StringBuilder()中做append(a+ ":" +c),
   编译器就会掉入陷阱,从而为你另外创建一个StringBuilder对象处理括号内的字符串操作(P284)

32,对于string上的操作(P288)

33,RTTI(Run-time Type Identification) 运行时类型识别
   java加载一个类的过程:加载class文件->创建Class对象->依据Class对象,创建此类对象,static的初始化是在类加载时进行的(P316)
   (1),Class.forName("Gum")    加载Gum.java文件,返回Gum的Class对象(这个会加载class文件),会初始化获得Gum的Class对象
   (2),ins.getClass()  通过对象ins获取,其Class对象,这个方法属于根类Object的一部分
   (3),ins.getSuperclass()  通过Class对象查询他的直接基类 (P317)
   (4),ClassName.Class (推荐使用P319) 类字面常量,不仅可以应用于普通的类,也可以应用于接口,数组以及基本数据类型,如果没有用引用指向ClassName.Class
   则ClassName.Class只是加载ClassName.Class,而不初始化,这个初始化发生在首次引用,需要创建对象
   if(x instanceof Dog){}  x是否是Dog的实例

34,泛型(java SE5提出)
   通配符"?",表示"任何事物",Class<?>优于平凡的Class,即便它们是等价的,Class<? extends Number> bounded 泛型参数被限定为Number的子类(P321)
   死记getSuperclass()时用的super,其他时候用extends,Class<? super Number>,见com.java.com.service.Thinking_In_Java.RTTI.GenerictoyTest

35,instanceof与Class的等价性：instanceof保持了类型的概念，它指的是“你是这个类吗，或者你是这个类的派生类吗？” 而如果用==比较实际的Class对象
   ,就没有考虑继承-它或者是这个确切的类型,或者不是 (P334)

36,在编译时,编译器必须知道所有要通过RTTI来处理的类 --- 要知道类的层次结构图

37,分布式计算(P335), --- 远程方法调用(RMI),网络编程并不需要每台服务器都有完整的java文件,但是相应的class文件一定要可获取

38,Class类和java.lang.reflect类库一起对反射的概念进行了支持

39,RTTI和反射:对于RTTI来说,编译器在编译时打开和检查.class文件,(换句话说,我们可以用"普通"方式调用对象的所有方法)
             而对于反射机制来说,.class文件在编译时是不可获取的,所以是在运行时打开和检查.class文件
             反射在java中是用来支持其他特性的,例如对象序列化和JavaBean,但是能动态的提取某个类的信息有时候还是很有用的(P335)

40,除了Optional<T>还有空对象(P341)可以避免空指针异常

41,java与C和C++的重要区别之一是,反射使我们可以编写动态代码 (P351)

42,元组,(P354)

43,数组就是一个简单的线性序列,这使得它对比其他容器的效率是最高的,为了这种效率所付出的代价是生命周期内数组大小不可变,不过推荐使用Arraylist,
   数组与集合的典型区别:数组使用[]来添加,访问对象,这是访问数组对象的唯一方式,而list使用get()(set和queue没有),add()来添加和访问
   新生的数组,所有的引用会自动初始化为null,基本书籍类型数值型(0),字符型(char(O)),boolean(false)

45,hashCode():Object的hashCode()方法生成散列码,而它默认是使用对象的地址计算散列码 (P489)

46,jar命令 (P571)



问题
1,org.apache.hadoop.mapred 下的 FileOutputFormat.class文件在哪里